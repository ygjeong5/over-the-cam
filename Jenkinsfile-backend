pipeline {
    agent any

    environment {
        DOCKERHUB_CREDENTIALS = credentials('docker')
        DOCKER_IMAGE_BACKEND = 'ghkdtnql/overthecam-backend'
    }

    stages {
        stage('Clean Workspace') {
            steps {
                cleanWs()
            }
        }

        stage('Build BE') {
            steps {
                dir('backend/overthecam') {
                    sh '''
                        chmod +x gradlew
                        rm -rf build
                        ./gradlew clean build -x test
                    '''
                }
            }
        }

        stage('Docker Build & Push') {
            steps {
                script {
                    try {
                        dir('backend/overthecam') {
                            sh """
                                # 이전 빌드 이미지 정리
                                docker images | grep ${DOCKER_IMAGE_BACKEND} | tr -s ' ' | cut -d ' ' -f 2 | xargs -I {} docker rmi ${DOCKER_IMAGE_BACKEND}:{} || true
                                
                                # 새 이미지 빌드 및 푸시
                                docker build -t ${DOCKER_IMAGE_BACKEND}:${BUILD_NUMBER} .
                                echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin
                                docker push ${DOCKER_IMAGE_BACKEND}:${BUILD_NUMBER}
                            """
                        }
                    } catch (Exception e) {
                        echo "Docker build/push failed: ${e.getMessage()}"
                        sh "docker rmi ${DOCKER_IMAGE_BACKEND}:${BUILD_NUMBER} || true"
                        throw e
                    }
                }
            }
        }

        stage('Deploy to EC2') {
            steps {
                script {
                    try {
                        sshagent(['ssh']) {
                            sh """
                                ssh -o StrictHostKeyChecking=no ubuntu@i12d204.p.ssafy.io '
                                    docker pull ${DOCKER_IMAGE_BACKEND}:${BUILD_NUMBER}
                                    docker stop backend || true
                                    docker rm backend || true
                                    docker run -d --name backend -p 8080:8080 ${DOCKER_IMAGE_BACKEND}:${BUILD_NUMBER}
                                    docker system prune -f
                                '
                            """
                        }
                    } catch (Exception e) {
                        echo "Deployment failed: ${e.getMessage()}"
                        throw e
                    }
                }
            }
        }
    }

    post {
        failure {
            sh "docker rmi ${DOCKER_IMAGE_BACKEND}:${BUILD_NUMBER} || true"
        }
    }
}