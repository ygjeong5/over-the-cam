pipeline {
    agent any

    environment {
        DOCKERHUB_CREDENTIALS = credentials('docker')
        DOCKER_IMAGE_FRONTEND = 'ghkdtnql/overthecam-frontend'
    }

    stages {
        stage('Git Clone') {
            steps {
                script {
                    try {
                        echo '====== Git Clone 시작 ======'
                        git branch: 'main',
                            url: 'https://lab.ssafy.com/s12-webmobile1-sub1/S12P11D204.git',
                            credentialsId: 'gitlab-user'
                        echo '====== Git Clone 성공 ======'
                    } catch (Exception e) {
                        echo '====== Git Clone 실패 ======'
                        error "Git clone failed: ${e.message}"
                    }
                }
            }
        }

        stage('Build FE') {
            steps {
                script {
                    try {
                        echo '====== React Build 시작 ======'
                        dir('frontend/overthecam') {
                            sh '''
                                npm install
                                npm uninstall rollup
                                npm install rollup
                                CI=false npm run build
                            '''
                        }
                        echo '====== React Build 성공 ======'
                    } catch (Exception e) {
                        echo '====== React Build 실패 ======'
                        error "Build failed: ${e.message}"
                    }
                }
            }
        }

        stage('Docker Build & Push') {
    steps {
        script {
            try {
                echo '====== Docker Build 시작 ======'

                // 기존 컨테이너 정리
                sh '''
                    # 'overthecam-frontend' 이름을 포함하는 모든 컨테이너 제거
                    docker ps -a | grep overthecam-frontend | awk '{print $1}' | xargs -r docker rm -f || true
                '''

                dir('frontend/overthecam') {
                    withCredentials([
                        string(credentialsId: 'front-base-url', variable: 'VITE_BASE_URL'),
                        string(credentialsId: 'front-livekit-url', variable: 'VITE_LIVEKIT_URL')
                    ]) {
                        // 도커 빌드 및 푸시
                        sh """
                            # 기존 이미지 제거 (태그와 상관없이 모든 'overthecam-frontend' 이미지 제거)
                            docker images | grep ${DOCKER_IMAGE_FRONTEND} | awk '{print \$3}' | xargs -r docker rmi -f || true

                            # 새 이미지 빌드
                            docker build --no-cache \
                            --build-arg VITE_BASE_URL=${VITE_BASE_URL} \
                            --build-arg VITE_LIVEKIT_URL=${VITE_LIVEKIT_URL} \
                            -t ${DOCKER_IMAGE_FRONTEND}:${BUILD_NUMBER} .

                            # DockerHub 로그인
                            echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin

                            # 이미지 푸시
                                docker push ${DOCKER_IMAGE_FRONTEND}:${BUILD_NUMBER}

                            # DockerHub 로그아웃
                                docker logout
                            """
                        }
                    }
                    echo '====== Docker Build & Push 완료 ======'
                } catch (Exception e) {
                    echo '====== Docker Build/Push 실패 ======'
                    // 실패 시 정리 작업
                    sh "docker logout || true"
                    sh "docker rmi ${DOCKER_IMAGE_FRONTEND}:${BUILD_NUMBER} || true"
                    error "Docker build/push failed: ${e.message}"
                }
            }
        }
    }

        stage('Deploy to EC2') {
            steps {
                script {
                    try {
                        echo '====== EC2 배포 시작 ======'
                        def dockerImageTag = "${DOCKER_IMAGE_FRONTEND}:${BUILD_NUMBER}"
                        sshagent(['ssh']) {
                            withCredentials([
                               string(credentialsId: 'front-base-url', variable: 'VITE_BASE_URL'),
                            ]) {

                            sh """
                                ssh -o StrictHostKeyChecking=no ubuntu@i12d204.p.ssafy.io '
                                echo "VITE_BASE_URL=${VITE_BASE_URL}" >> .env &&
                                docker pull ${dockerImageTag} &&
                                docker stop frontend || true &&
                                docker rm frontend || true &&
                                docker run -d --name frontend -p 5557:80 --env-file .env ${dockerImageTag} &&
                                docker system prune -f'
                            """
                            }
                        }
                        echo '====== EC2 배포 성공 ======'
                    } catch (Exception e) {
                        echo '====== EC2 배포 실패 ======'
                        error "Deployment failed: ${e.message}"
                    }
                }
            }
        }
    }

    post {
        always {
            echo '====== 파이프라인 종료 ======'
            sh "docker logout || true"
            cleanWs()
        }
        failure {
            echo '====== 파이프라인 실패 ======'
            sh "docker rmi ${DOCKER_IMAGE_FRONTEND}:${BUILD_NUMBER} || true"
        }
        success {
            echo '====== 파이프라인 성공 ======'
        }
    }
}
