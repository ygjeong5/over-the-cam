pipeline {
    agent any

    environment {
        DOCKERHUB_CREDENTIALS = credentials('docker')
        DOCKER_IMAGE_FRONTEND = 'ghkdtnql/overthecam-frontend'
    }

    stages {
        stage('Git Clone') {
            steps {
                script {
                    try {
                        echo '====== Git Clone 시작 ======'
                        git branch: 'main',
                            url: 'https://lab.ssafy.com/s12-webmobile1-sub1/S12P11D204.git',
                            credentialsId: 'gitlab-user'
                        echo '====== Git Clone 성공 ======'
                    } catch (Exception e) {
                        echo '====== Git Clone 실패 ======'
                        error "Git clone failed: ${e.message}"
                    }
                }
            }
        }

        stage('Build FE') {
            steps {
                script {
                    try {
                        echo '====== React Build 시작 ======'
                        dir('frontend/overthecam') {
                            sh '''
                                set -x
                                npm install
                                npm uninstall rollup
                                npm install rollup
                                CI=false npm run build
                            '''
                        }
                        echo '====== React Build 성공 ======'
                    } catch (Exception e) {
                        echo '====== React Build 실패 ======'
                        error "Build failed: ${e.message}"
                    }
                }
            }
        }

        stage('Docker Build & Push') {
            steps {
                script {
                    try {
                        echo '====== Docker Build 시작 ======'

                        dir('frontend/overthecam') {
                            withCredentials([
                                string(credentialsId: 'front-base-url', variable: 'VITE_BASE_URL'),
                                string(credentialsId: 'front-livekit-url', variable: 'VITE_LIVEKIT_URL')
                            ]) {
                                sh '''
                                    set -x
                                    echo "== Docker 환경 확인 =="
                                    docker version
                                    docker info

                                    echo "== 환경 변수 확인 =="
                                    echo "VITE_BASE_URL=${VITE_BASE_URL}"
                                    echo "VITE_LIVEKIT_URL=${VITE_LIVEKIT_URL}"

                                    echo "== Docker Build 실행 (BuildKit 비활성화) =="
                                    export DOCKER_BUILDKIT=0
                                    docker build --no-cache \
                                        --build-arg VITE_BASE_URL=${VITE_BASE_URL} \
                                        --build-arg VITE_LIVEKIT_URL=${VITE_LIVEKIT_URL} \
                                        --pull \
                                        -t ${DOCKER_IMAGE_FRONTEND}:${BUILD_NUMBER} .

                                    echo "== DockerHub 로그인 =="
                                    echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin

                                    echo "== Docker 이미지 푸시 =="
                                    docker push ${DOCKER_IMAGE_FRONTEND}:${BUILD_NUMBER}

                                    echo "== DockerHub 로그아웃 =="
                                    docker logout
                                '''
                            }
                        }
                        echo '====== Docker Build & Push 완료 ======'
                    } catch (Exception e) {
                        echo '====== Docker Build/Push 실패 ======'
                        sh "docker logout || true"
                        error "Docker build/push failed: ${e.message}"
                    }
                }
            }
        }

        stage('Deploy to EC2') {
            steps {
                script {
                    try {
                        echo '====== EC2 배포 시작 ======'
                        def dockerImageTag = "${DOCKER_IMAGE_FRONTEND}:${BUILD_NUMBER}"
                        
                        sshagent(['ssh']) {
                            withCredentials([
                                string(credentialsId: 'front-base-url', variable: 'VITE_BASE_URL'),
                            ]) {
                                sh """
                                    set -x
                                    echo "== EC2 배포 환경 변수 확인 =="
                                    echo "DOCKER_IMAGE_FRONTEND=${DOCKER_IMAGE_FRONTEND}"
                                    echo "BUILD_NUMBER=${BUILD_NUMBER}"
                                    echo "dockerImageTag=${dockerImageTag}"

                                    echo "== EC2에 SSH 접속하여 Docker 컨테이너 실행 =="
                                    ssh -o StrictHostKeyChecking=no ubuntu@i12d204.p.ssafy.io '
                                        echo "VITE_BASE_URL=${VITE_BASE_URL}" >> .env &&
                                        docker pull ${dockerImageTag} &&
                                        docker stop frontend || true &&
                                        docker rm frontend || true &&
                                        docker run -d --name frontend -p 5557:80 --env-file .env ${dockerImageTag} &&
                                        docker system prune -f'
                                """
                            }
                        }
                        echo '====== EC2 배포 성공 ======'
                    } catch (Exception e) {
                        echo '====== EC2 배포 실패 ======'
                        error "Deployment failed: ${e.message}"
                    }
                }
            }
        }  
    }  

    post {
        always {
            echo '====== 파이프라인 종료 ======'
            sh "docker logout || true"
            cleanWs()
        }
        failure {
            echo '====== 파이프라인 실패 ======'
        }
        success {
            echo '====== 파이프라인 성공 ======'
        }
    }
} 
