pipeline {
   agent any

        //nginx에서 80 포트로 8080으로 포워딩

   environment {
       DOCKERHUB_CREDENTIALS = credentials('docker')
       DOCKER_IMAGE = 'ghkdtnql/overthecam'
       DOCKER_IMAGE_FRONTEND = 'ghkdtnql/overthecam-front'

       // MySQL 환경변수
       MYSQL_DB_URL = credentials('mysql-url')        // 전체 JDBC URL
       MYSQL_CRED = credentials('mysql-credentials')
       MYSQL_DB_USERNAME = "${MYSQL_CRED_USR}"
       MYSQL_DB_PASSWORD = "${MYSQL_CRED_PSW}"

       // JWT Secret
       JWT_SECRET = credentials('jwt-secret')

       // OpenVidu 설정
       OPENVIDU_URL = credentials('openvidu-url')     // 전체 OpenVidu URL
       OPENVIDU_SECRET = credentials('openvidu-secret')
   }

   stages {
       stage('Git Clone') {
           steps {
               script {
                   try {
                       echo '====== Git Clone 시작 ======'
                       git branch: 'main',
                           url: 'https://lab.ssafy.com/s12-webmobile1-sub1/S12P11D204.git',
                           credentialsId: 'gitlab-user'
                       echo '====== Git Clone 성공 ======'
                   } catch (Exception e) {
                       echo '====== Git Clone 실패 ======'
                       error "Git clone failed: ${e.message}"
                   }
               }
           }
       }

      stage('Build Backend') {
          steps {
              dir('backend/overthecam') {
                  sh '''
                      chmod +x gradlew
                      rm -rf build
                      ./gradlew clean build -x test
                  '''
              }
          }
      }

      stage('Build Frontend') {
          steps {
              dir('backend/overthecam') {
                  sh '''
                      npm install
                      npm run build
                  '''
              }
          }
      }

      stage('Docker Build & Push') {
          steps {
              script {
                  // Backend
                  dir('backend/overthecam') {
                      sh """
                          docker build -t ${DOCKER_IMAGE_BACKEND}:${BUILD_NUMBER} .
                          echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin
                          docker push ${DOCKER_IMAGE_BACKEND}:${BUILD_NUMBER}
                      """
                  }

                  // Frontend
                  dir('frontend') {
                      sh """
                          docker build -t ${DOCKER_IMAGE_FRONTEND}:${BUILD_NUMBER} .
                          docker push ${DOCKER_IMAGE_FRONTEND}:${BUILD_NUMBER}
                      """
                  }
              }
          }
      }

      stage('Deploy to EC2') {
          steps {
              sshagent(['ssh']) {
                  sh """
                      ssh -o StrictHostKeyChecking=no ubuntu@i12d204.p.ssafy.io '
                          # Backend
                          docker pull ${DOCKER_IMAGE_BACKEND}:${BUILD_NUMBER}
                          docker stop backend || true
                          docker rm backend || true
                          docker run -d --name backend -p 8080:8080 ${DOCKER_IMAGE_BACKEND}:${BUILD_NUMBER}

                          # Frontend
                          docker pull ${DOCKER_IMAGE_FRONTEND}:${BUILD_NUMBER}
                          docker stop frontend || true
                          docker rm frontend || true
                          docker run -d --name frontend -p 5173:80 ${DOCKER_IMAGE_FRONTEND}:${BUILD_NUMBER}
                      '
                  """
              }
          }
      }
   }

   post {
       always {
           echo '====== 파이프라인 종료 ======'
       }
       failure {
           echo '====== 파이프라인 실패 ======'
       }
       success {
           echo '====== 파이프라인 성공 ======'
       }
   }
}