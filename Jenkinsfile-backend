pipeline {
    agent any

    environment {
        DOCKERHUB_CREDENTIALS = credentials('docker')
        DOCKER_IMAGE_BACKEND = 'ghkdtnql/overthecam-backend'
        
        // MySQL 환경변수
        MYSQL_DB_URL = credentials('mysql-url')
        MYSQL_CRED = credentials('mysql-credentials')
        MYSQL_DB_USERNAME = "${MYSQL_CRED_USR}"
        MYSQL_DB_PASSWORD = "${MYSQL_CRED_PSW}"
        
        // JWT Secret
        JWT_SECRET = credentials('jwt-secret')
        
        // OpenVidu 설정
        OPENVIDU_URL = credentials('openvidu-url')
        OPENVIDU_SECRET = credentials('openvidu-secret')
    }

    stages {
        stage('Git Clone') {
            steps {
                script {
                    try {
                        echo '====== Git Clone 시작 ======'
                        git branch: 'main',
                            url: 'https://lab.ssafy.com/s12-webmobile1-sub1/S12P11D204.git',
                            credentialsId: 'gitlab-user'
                        echo '====== Git Clone 성공 ======'
                    } catch (Exception e) {
                        echo '====== Git Clone 실패 ======'
                        error "Git clone failed: ${e.message}"
                    }
                }
            }
        }

        stage('Build BE') {
            steps {
                script {
                    try {
                        echo '====== Gradle Build 시작 ======'
                        sh '''
                            cd backend/overthecam
                            chmod +x gradlew
                            rm -rf build
                            ./gradlew clean
                            ./gradlew build -x test
                        '''
                        echo '====== Gradle Build 성공 ======'
                    } catch (Exception e) {
                        echo '====== Gradle Build 실패 ======'
                        error "Build failed: ${e.message}"
                    }
                }
            }
        }

        stage('Docker Build & Push') {
            steps {
                script {
                    try {
                        echo '====== Docker Build 시작 ======'
                        dir('backend/overthecam') {
                            sh """
                                docker images | grep ${DOCKER_IMAGE_BACKEND} | tr -s ' ' | cut -d ' ' -f 2 | xargs -I {} docker rmi ${DOCKER_IMAGE_BACKEND}:{} || true
                                docker build -t ${DOCKER_IMAGE_BACKEND}:${BUILD_NUMBER} .
                                echo $DOCKERHUB_CREDENTIALS_PSW | docker login -u $DOCKERHUB_CREDENTIALS_USR --password-stdin
                                docker push ${DOCKER_IMAGE_BACKEND}:${BUILD_NUMBER}
                                docker logout
                            """
                        }
                        echo '====== Docker Build & Push 완료 ======'
                    } catch (Exception e) {
                        echo '====== Docker Build/Push 실패 ======'
                        error "Docker build/push failed: ${e.message}"
                        sh "docker rmi ${DOCKER_IMAGE_BACKEND}:${BUILD_NUMBER} || true"
                    }
                }
            }
        }

        stage('Deploy to EC2') {
            steps {
                script {
                    try {
                        echo '====== EC2 배포 시작 ======'
                        sshagent(['ssh']) {
                            sh """
                                ssh -o StrictHostKeyChecking=no ubuntu@i12d204.p.ssafy.io '
                                docker pull ${DOCKER_IMAGE_BACKEND}:${BUILD_NUMBER}
                                docker stop backend || true
                                docker rm backend || true
                                docker run -d --name backend \
                                    -p 8080:8080 \
                                    -e MYSQL_DB_URL=${MYSQL_DB_URL} \
                                    -e MYSQL_DB_USERNAME=${MYSQL_DB_USERNAME} \
                                    -e MYSQL_DB_PASSWORD=${MYSQL_DB_PASSWORD} \
                                    -e JWT_SECRET=${JWT_SECRET} \
                                    -e OPENVIDU_URL=${OPENVIDU_URL} \
                                    -e OPENVIDU_SECRET=${OPENVIDU_SECRET} \
                                    ${DOCKER_IMAGE_BACKEND}:${BUILD_NUMBER}
                                docker system prune -f
                                '
                            """
                        }
                        echo '====== EC2 배포 성공 ======'
                    } catch (Exception e) {
                        echo '====== EC2 배포 실패 ======'
                        error "Deployment failed: ${e.message}"
                    }
                }
            }
        }
    }

    post {
        always {
            echo '====== 파이프라인 종료 ======'
            sh "docker logout || true"
            cleanWs()
        }
        failure {
            echo '====== 파이프라인 실패 ======'
            sh "docker rmi ${DOCKER_IMAGE_BACKEND}:${BUILD_NUMBER} || true"
        }
        success {
            echo '====== 파이프라인 성공 ======'
        }
    }
}